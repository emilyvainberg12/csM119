<!-- code for ping pong display was taken from:
https://github.com/ajmalmohad/ping-pong -->
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Ping Pong</title>
    <link href="./style.css" rel="stylesheet" />
    <script src="https://d3js.org/d3.v4.min.js"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Cinzel:wght@400;500;600&display=swap');
        @import url('https://fonts.googleapis.com/css2?family=Cinzel:wght@400;500;600&display=swap');
        *{
            padding:0;
            margin: 0;
            box-sizing: border-box;
        }

        body{
            height: 100vh;
            width: 100%;
            display: flex;
            align-items: center;
            justify-content: center;
            flex-direction: column;
            background: black;
            color:white;
            font-family: 'Cinzel', serif;
        }

        button{
            font-family: 'Cinzel', serif;
            padding:10px 15px;
            font-size: 24px;
            background: black;
            border: 1px solid white;
            color: white;
            cursor: pointer;
        }
        *{
            margin:0;
            padding:0;
            box-sizing: border-box;
        }

        body{
            position: relative;
            background: black;
            overflow: hidden;
            font-family: 'Cinzel',serif;
        }

        .small-device{
            color:white;
            height: 100vh;
            width: 100%;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 10%;
            text-align: center;
            line-height: 140%;
            font-size: 16px;
        }

        .canvas-container{
            height: 100vh;
            width: 100%;
            position: relative;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .canvas-container p{
            font-size: 50px;
            font-weight: 600;
            color: white;
            min-width: 40px;
            text-align: center;
        }

        .canvas-container p:first-child{
            margin-right: 60px;
        }

        .canvas-container p:last-child{
            margin-left: 60px;
        }


        .canvas-container .wrapper{
            border: 4px solid white;
            border-radius: 5px;
            display: flex;
            align-items: center;
            justify-content: center;
            box-shadow: 0px 0px 20px #91c2eb;
        }
    </style>
    
</head>

<body>
    <noscript>Your browser does not support JavaScript!</noscript>
    <div class="canvas-container">
        <p class="left">0</p>
        <div class="wrapper">
            <canvas id="container"></canvas>
        </div>
        <p class="right">0</p>
    </div>

    <div class="small-device">
        <p>This game is currently not supported in mobile.</p>
    </div>
    <script>
        const canvas = document.getElementById('container')
        const context = canvas.getContext("2d")
        sessionStorage.setItem("winner", "None");
        let sensorValue = 0

        /**
         * Objects
         */
        const ball = {
            radius: 8,
            positionX: canvas.width / 2 + 8,
            positionY: canvas.height / 2 + 8,
            velocityX: 2,
            velocityY: 2,
            color: 'white'
        }

        const leftPlayer = {
            height: 600,
            width: 10,
            positionX: 10,
            positionY: canvas.height / 2 - 100 / 2,
            color: 'white',
            player: 'left',
            speed: 2
        }

        const rightPlayer = {
            height: 100,
            width: 10,
            positionX: canvas.width - 20,
            positionY: canvas.height / 2 - 100 / 2,
            color: 'white',
            player: 'right',
            speed: 2
        }


        /**
         * Game
         */
        const game = {
            leftScore: 0,
            rightScore: 0,
            turn: 0,
            topScore: 5,
            speedIncreaseHit: 3,
        }

        const keyPressed = {
            W: false,
            S: false,
            Up: false,
            Down: false
        }

        let activated = true;
        let hits = 0;


        /**
         * Update and Draw
         */
        function drawLeftPlayer() {
            context.beginPath();
            context.fillStyle = leftPlayer.color;
            context.rect(leftPlayer.positionX, leftPlayer.positionY, leftPlayer.width, leftPlayer.height);
            context.fill();
            context.closePath();
        }

        function drawRightPlayer() {
            context.beginPath();
            context.fillStyle = rightPlayer.color;
            context.rect(rightPlayer.positionX, rightPlayer.positionY, rightPlayer.width, rightPlayer.height);
            context.fill();
            context.closePath();
        }


        function drawBall() {
            context.beginPath();
            context.fillStyle = ball.color;
            context.arc(ball.positionX, ball.positionY, ball.radius, 0, Math.PI * 2);
            context.fill();
            context.closePath();
        }


        function drawAll() {
            context.clearRect(0, 0, canvas.width, canvas.height);
            drawLeftPlayer()
            drawRightPlayer()
            drawBall()
            xmlhttp.open("POST", SERVERADDRESS, true)
            xmlhttp.setRequestHeader("Content-type", "application/json")
            xmlhttp.send("")
            if (sensorValue > 0){ 
                if (leftPlayer.positionY > 0) {
                    leftPlayer.positionY -= leftPlayer.speed;
                }
            }

            if (sensorValue < 0){
                if (rightPlayer.positionY < canvas.height - rightPlayer.height) {
                    rightPlayer.positionY += rightPlayer.speed;
                }
            }
        }


        function resetBall() {
            ball.positionX = canvas.width / 2 + 8
            ball.positionY = canvas.height / 2 + 8

            let velocityX = ball.velocityX
            let velocityY = ball.velocityY

            ball.velocityX = 0
            ball.velocityY = 0

            setTimeout(() => {
                ball.velocityX = -velocityX
                ball.velocityY = -velocityY
            }, 1000)
        }


        function collisionTimeLag() {
            activated = false
            console.log('Deactivated Collision')
            setTimeout(() => {
                activated = true
                console.log('Ready For Collision')
            }, 1000)
        }


        function setScore() {
            if (ball.positionX > canvas.width - (rightPlayer.width)) {
                game.leftScore++
                resetBall()
            } else if (ball.positionX < rightPlayer.width) {
                game.rightScore++
                resetBall()
            }

            document.getElementsByClassName('left')[0].textContent = game.leftScore
            document.getElementsByClassName('right')[0].textContent = game.rightScore
        }


        function gameOver(){
            if(game.leftScore === game.topScore){
                console.log('Left Wins')
                sessionStorage.setItem("winner", "Left");
                window.location.href = "winner.html";
                resetGame()
            }else if(game.rightScore === game.topScore){
                console.log('Right Wins')
                sessionStorage.setItem("winner", "Right");
                window.location.href = "winner.html";
                resetGame()
            }
        }


        function resetGame(){
            game.leftScore = 0
            game.rightScore = 0
            ball.positionX = 0
            ball.positionY = 0
            updateDefault()
        }

        function updateStates() {
            if ((ball.positionY + ball.radius) >= canvas.height || (ball.positionY - ball.radius) <= 0) {
                ball.velocityY = -ball.velocityY;
            }

            if (
                (ball.positionX + ball.radius >= canvas.width - (rightPlayer.width + 10) &&
                    (ball.positionY >= rightPlayer.positionY && ball.positionY <= rightPlayer.positionY + rightPlayer.height)) ||

                (ball.positionX - ball.radius <= (leftPlayer.width + 10) &&
                    (ball.positionY >= leftPlayer.positionY && ball.positionY <= leftPlayer.positionY + leftPlayer.height))
            ) {
                if (activated) {
                    hits++;
                    ball.velocityX = -ball.velocityX
                    collisionTimeLag()
                }
            }

            setScore()
            gameOver()

            if(hits === game.speedIncreaseHit){x
                hits = 0
                ball.velocityX += 0.2
                ball.velocityY += 0.2
                leftPlayer.speed += 0.2
                rightPlayer.speed += 0.2
            }

            ball.positionX += ball.velocityX;
            ball.positionY += ball.velocityY;
        }


        /**
        * Game Loop and Render
        */
        function gameLoop() {
            updateStates()
            drawAll()
            requestAnimationFrame(gameLoop);
        }

        requestAnimationFrame(gameLoop);


        /**
        * Support
        */
        function updateDefault() {
            canvas.width = Math.min(window.innerWidth * 0.6, 800)
            canvas.height = Math.min(window.innerHeight * 0.8, 600)

            ball.positionX = canvas.width / 2 + ball.radius
            ball.positionY = canvas.height / 2 + ball.radius

            leftPlayer.positionY = canvas.height / 2 - leftPlayer.height / 2

            rightPlayer.positionX = canvas.width - (rightPlayer.width + 10)
            rightPlayer.positionY = canvas.height / 2 - rightPlayer.height / 2
        }

        function resizeHandler() {
            if (window.innerWidth < 560) {
                document.getElementsByClassName('small-device')[0].style.display = "flex";
                document.getElementsByClassName('canvas-container')[0].style.display = "none";
            } else {
                document.getElementsByClassName('small-device')[0].style.display = "none";
                document.getElementsByClassName('canvas-container')[0].style.display = "flex";
            }

            updateDefault()
        }

        resizeHandler()
        window.addEventListener('resize', () => { resizeHandler() })

        const SERVERADDRESS = "http://127.0.0.1:3000"
        // use XML HTTP request to grab data from the server (central)
        let xmlhttp = new XMLHttpRequest()
        var dataset1 = [];

        startTime = new Date();
        xmlhttp.onreadystatechange = function () {
            if (xmlhttp.readyState == 4 && xmlhttp.status == 200) {
                let responseText = xmlhttp.responseText
                sensorValue = parseFloat(JSON.parse(responseText).sensorValue)
            }
        }
</script>
</body>


</html>
